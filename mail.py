#########################################################################################################
#                                                                                                       #
#   THE CURRENT SCRIPT WILL:                                                                            #
#   1. SEND VIA GMAIL A SINGLE FILE LOCATED UNDER A SINGLE DIRECTORY                                    #
#   2. SEND A MESSAGE IN THE BODY OF THE EMAIL                                                          #
#   3. MOVE THE FILE INTO A DIRECTORY NAMED ARCHVE - YOU  CAN CHANGE THE PATH AND NAME OF THE ARCHIVE   #
#   4. DELETE THE DIRECTORY WHERE THAT HOUSED FILE                                                      #
#                                                                                                       #
#   THIS SCRIPT CAN BE SET TO RUN BY A BATCH FILE AND  SEND A LOG OR REPORT GENERATED BY A SYSTEM APP   #
#                                                                                                       #
######################################################################################################### 


import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
import glob, os
import datetime

parent = 'C:/ROOT_DIRECTORY/'

# Send Mail
def PostReport(defFile): 
    sender = 'USER@GMAIL.COM'
    password = 'PASSWORD'
    recipient = ['EMAIL1@EMAIL.COM', 'EMAIL2@EMAIL.COM', 'EMAIL1@EMAIL.COM']
    dateTimeObj = datetime.datetime.now()
    timeStampStr = dateTimeObj.strftime('%Y-%m-%d_%H%M%S')
    subject = 'SUBJECT' + timeStampStr

    msg = MIMEMultipart()
    msg['from'] = sender
    msg['to'] = ','.join(recipient)
    msg['subject'] = subject

    body = """Pellentesque habitant morbi tristique senectus 
            et netus et malesuada fames ac turpis egestas. 
            Cras vitae semper est. Nullam ligula justo, venenatis sit amet 
            purus nec, efficitur euismod elit. Pellentesque mauris quam, 
            mattis id leo id, placerat facilisis urna. Nunc egestas tortor erat, 
            et sodales mauris efficitur eu. Duis iaculis porttitor mi, ut gravida lorem bibendum in. 
            Quisque at commodo elit. Aliquam erat volutpat. In accumsan malesuada ex ac ultrices."""
    msg.attach(MIMEText(body,'plain'))

    filename = defFile
    attachement = open(filename, 'rb')

    part =  MIMEBase('application', 'octet-stream')
    part.set_payload((attachement).read())
    encoders.encode_base64(part)
    part.add_header('Content-Disposition', "attachement; filename= " + filename)

    msg.attach(part)
    text = msg.as_string()

    server = smtplib.SMTP('smtp.gmail.com', 587)
    server.starttls()
    server.login(sender, password)


    server.sendmail(sender, recipient, text)
    server.quit()

# Looks for the path to the directory hosting the file to be sent
def lookForPath():
    for root, dirs, files in os.walk(parent, topdown=False):
        for name in dirs:
            filePath = os.path.join(root, name)
    return filePath

# looks for a file to be sent within the directory
def lookForFile():
    for root, dirs, files in os.walk(parent, topdown=False):
        for name in files:
            file = os.path.join(name)
    return file

# Archives file after sending
def moveFileToArchive(myPath, MyFile):
    fileToMove = myPath + '/' + myFile
    destination = 'C:/YOUR_PATH/' + myFile
    os.rename(fileToMove, destination)

# Deletes directory after archiving file
def trashUnusedDir():
    for root, dirs, files in os.walk(parent, topdown=False):
        for name in dirs:
            dirToTrash = os.path.join(name)
    pathToTrash = os.path.join(parent,dirToTrash)
    os.rmdir(pathToTrash)
    




myPath = lookForPath() 
myFile = lookForFile()
PostReport(myPath + '/' + myFile)
moveFileToArchive(myPath, myFile)
trashUnusedDir()